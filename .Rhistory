x = 1:10
x > 5
sum(x>5)
head(x)
library(shiny)
runApp("~/Desktop/BEACN_Calculator")
runApp("~/Desktop/BEACN_Calculator")
library(shiny)
runApp("~/Documents/BERKELEY/Spring_2014/BEACN/BEACN_Calculator")
page <- readLines("http://www.imdb.com/chart")
page <- readLines("http://www.imdb.com/chart")
length(page)
page[1:20]
grep("Rank", page) # looking for the start of the table
page[2106]
page[2106:2200] # looking at how the html is formatted
## Overall strategy: for each variable,
## first fine the LINES we want,
## then extract the DATA from those lines
## 1. Get movie names
index <- grep("titleColumn" , page) # this is always one line BEFORE the line with the title
movielines <- page[index + 1] # the lines with movie names
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*" # tags with whitespace before and/or after
nothing <- "" # empty string, i.e. remove it
title <- gsub(pattern = tagwspace, replacement = nothing,
movielines)
## 2. Get weekend and gross numbers
page[2106:2200]
index <- grep("ratingColumn", page)
weekendlines <- page[index[seq(1, length(index)-1, by = 2)]]
grosslines <- page[index[seq(2, length(index), by = 2)]]
weekend <- gsub(pattern = tagwspace, replacement = nothing,
weekendlines)
gross <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
# remove $ and M - doing this two different ways
weekend <- substring(weekend, first = 2,
last = nchar(weekend) - 1)
weekend <- as.numeric(weekend)
notdigitperiod <- "[^[:digit:].]"
gross <- gsub(pattern = notdigitperiod, replacement = nothing,
x = gross)
gross <- as.numeric(gross)
# A third way to do it, with tagging and back-referencing
grosslines <- page[index[seq(2, length(index), by = 2)]]
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
fullline <- "^\\$([^M]+)M$"
gregexpr(fullline, gross2) # check that it matches
gross2 <- gsub(pattern = fullline, replacement = "\\1", x = gross2)
gross2 <- as.numeric(gross2)
## 3. Get weeks column
page[2106:2200]
index <- grep("weeksColumn", page)
weeklines <- page[index]
weeks <- gsub(pattern = tagwspace, replacement = nothing, weeklines)
weeks <- as.numeric(weeks)
## 4. Get year
index <- grep("secondaryInfo", page)
page[index]
# this needs a more detailed regexp to find the lines we want
pattern <- "\\([0-9]+\\)"
index <- grep(pattern, page)
yearlines <- page[index]
year <- gsub(pattern = tagwspace, replacement = nothing, yearlines)
year <- as.numeric(substring(year, 2, 5))
##########
# Loop through each movie and open up the link,
# download rating information
movielines # note links
wholeline <- "^[[:blank:]]*<a href=\"/title/tt([[:digit:]]+)\\?.*$"
#wholeline <- "^[^[:digit:]]*([[:digit:]]+)\\?.*$"
grep(wholeline, movielines)
ids <- gsub(pattern = wholeline, replacement = "\\1", movielines)
urls <- paste("http://www.imdb.com/title/tt", ids, sep = "")
ratings <- rep(NA, length(urls))
for(i in 1:length(urls)){
print(i)
moviepage <- readLines(urls[i])
ratepattern <- "^.*star-box-giga-star\">[[:blank:]]*([[:digit:].]+).*$"
line <- moviepage[grep(ratepattern, moviepage)]
ratings[i] <- as.numeric(gsub(ratepattern, "\\1", line))
}
movies <- data.frame(title = title, year = year, weekend = weekend, gross = gross, ratings = ratings)
page
head(page)
grep("Rank", page)
page[2109]
page[2109:2200]
page <- readLines("http://www.imdb.com/chart")
length(page)
page[1:20]
grep("Rank", page) # looking for the start of the table
help(gregexp)
help(gregexpr)
page[2106]
grep("Rank", page) # looking for the start of the table
page[2109]
page[2109:2200] # looking at how the html is formatted
index <- grep("titleColumn" , page) # this is always one line BEFORE the line with the title
page[index]
index
page[2120]
movielines <- page[index + 1] # the lines with movie names
movielines
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*" # tags with whitespace before and/or after
tagwspace
nothing <- "" # empty string, i.e. remove it
title <- gsub(pattern = tagwspace, replacement = nothing,
movielines)
title
movielines
gregexpr("[[:blank:]]*<[^>]*>[[:blank:]]*", movielines)
grep("[[:blank:]]*<[^>]*>[[:blank:]]*", movielines)
gregexpr("[[:blank:]]*<[^>]*>[[:blank:]]*", movielines)
movielines
page[2106:2200]
source('~/.active-rstudio-document', echo=TRUE)
page[2109:2200]
index <- grep("ratingColumn", page)
index
weekendlines <- page[index[seq(1, length(index)-1, by = 2)]]
weekendlines
index
page[index[1]]
page[index[2]]
page[index[3]]
page[index[4]]
page[index[5]]
weekendlines
grosslines <- page[index[seq(2, length(index), by = 2)]]
weekend <- gsub(pattern = tagwspace, replacement = nothing,
weekendlines)
weekend
gross <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross
weekend <- substring(weekend, first = 2,
last = nchar(weekend) - 1)
weekend
weekend <- as.numeric(weekend)
weekend
gross
gross <- gsub(pattern, repacement, x = gross)
gross <- gsub(pattern, replacement, x = gross)
gross
notdigitperiod <- "[^[:digit:].]"
gross
notdigitperiod
gross <- gsub(pattern = notdigitperiod, replacement = nothing,
x = gross)
gross
gross <- as.numeric(gross)
grosslines <- page[index[seq(2, length(index), by = 2)]]
grosslines
tagwspace
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2
fullline <- "^\\$([^M]+)M$"
fullline <- "^\\$([^M]+)M$"
gross2 <- gsub(pattern = fullline, replacement = "\\1", x = gross2)
gross2
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2
gross2
fullline
gregexpr(fullline, gross2) # check that it matches
gross2
fullline
gross2 <- gsub(pattern = fullline, replacement = "\\1", x = gross2)
gross2
gross2 <- gsub(pattern = fullline, replacement = "", x = gross2)
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2 <- gsub(pattern = fullline, replacement = "", x = gross2)
gross2
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2 <- gsub(pattern = fullline, replacement = "\\1", x = gross2)
gross2
gross2
gregexpr(fullline, gross2) # check that it matches
gross2
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2
gregexpr(fullline, gross2) # check that it matches
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2
gross2 <- gsub(pattern = fullline, replacement = "\\1", x = gross2)
gross2
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2
gross2 <- gsub(pattern = fullline, replacement = "", x = gross2)
gross2
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
gross2 <- gsub(pattern = fullline, replacement = "\1", x = gross2)
gross2
gross2 <- gsub(pattern = tagwspace, replacement = nothing,
grosslines)
fullline <- "^\\$([^M]+)M$"
gregexpr(fullline, gross2) # check that it matches
gross2 <- gsub(pattern = fullline, replacement = "\\1", x = gross2)
gross2
optimize(y, interval = c(-10, 10))
sigmoid <- function(x) {
1 / ( 1 + exp(-x) )
}
sigmoid(0)
library(Ryacas);
x <- Sym("x");
s <- expression(1 / (1+e^-x));
deriv(s,x);
library(Ryacas);
install.packages("Ryacas")
library(Ryacas);
x <- Sym("x");
s <- expression(1 / (1+e^-x));
deriv(s,x);
Simplify(deriv(s,x));
f = function(x) {-x^2}
fp = function(f, dx) {
return function(x) {
return (f(x + dx) - f(x)) / dx;
};
}
fp = function(f, dx) {
return function(x) {
return (f(x + dx) - f(x)) / dx;
}
}
fp = function(f, dx) {
return function(x) {
return (f(x + dx) - f(x)) / dx
}
}
fp = function(f, dx) {
return {function(x) {
return (f(x + dx) - f(x)) / dx
}
}
}
fp = function(f, dx) {
return {function(x)
return {(f(x + dx) - f(x)) / dx
}
}
}
y = function(x) {-x^2}
optimize(y, interval = c(-10, 10), maximum = T)
#1
y = function(x) {-x^2}
#2
optimize(y, interval = c(-10, 10), maximum = T)
faithful
help(faithful)
hist(faithful$waiting)
main = "")
hist(faithful$waiting,
main = "")
hist(faithful$waiting,
xlab = "Waiting Times"
main = "")
hist(faithful$waiting,
xlab = "Waiting Times",
main = "")
hist(faithful$waiting,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
xseq = seq(-10, 10, length = 100)
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "1")
xseq = seq(-10, 10, length = 100)
dmixnorm2 = function(x, m1, s1, m2, s2, p) {
p*dnorm(x,m1,s1) + (1-p)*dnorm(x, m2, s2)
}
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "1")
}
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
xseq = seq(-10, 10, length = 100)
dmixnorm2 = function(x, m1, s1, m2, s2, p) {
p*dnorm(x,m1,s1) + (1-p)*dnorm(x, m2, s2)
}
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.5), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.5), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.2), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.5), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 1), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0), type = "l")
help(dmixnorm2)
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
hist(faithful$waiting,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
help(log)
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return{log(dmixnorm2(x, m1, s1, m2, s2, p))}
}
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return{log(dmixnorm2(x, m1, s1, m2, s2, p))}
}
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return{function (par, x) {log(dmixnorm2(x, m1, s1, m2, s2, p))} }
}
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return{log(dmixnorm2(x, m1, s1, m2, s2, p)) }
}
dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4)
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return(-log(dmixnorm2(x, m1, s1, m2, s2, p)))
}
help(prod)
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return(-sum(log(dmixnorm2(x, m1, s1, m2, s2, p))))
}
nll(par = c("p", "m1", "s1", "m2", "s2"), x = dnorm(100))
dnorm(100)
rnorm(100)
nll(par = c("p", "m1", "s1", "m2", "s2"), x = rnorm(100))
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.5), type = "l")
nll = function(par, x) {
p = par["p"]
m1 = par["m1"]
s1 = par["s1"]
m2 = par["m2"]
s2 = par["s2"]
return(-sum(log(dmixnorm2(x, m1, s1, m2, s2, p))))
}
nll(par = c("p" = 0.5, "m1" = -3, "s1" = 2, "m2" = 4, "s2" = 2), x = rnorm(100))
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
nll(par = c("p" = 0.5, "m1" = 52.5, "s1" = 10, "m2" = 80, "s2" = 10), x = rnorm(100))
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.3), type = "l")
source('~/.active-rstudio-document', echo=TRUE)
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
plot(xseq, dmixnorm2(xseq, m1 = 52.5, s1 = 5, m2 = 80, s2 = 5, p = 0.4), type = "l")
xseq = seq(30, 100, length = 100)
dmixnorm2 = function(x, m1, s1, m2, s2, p) {
p*dnorm(x,m1,s1) + (1-p)*dnorm(x, m2, s2)
}
plot(xseq, dmixnorm2(xseq, m1 = 52.5, s1 = 5, m2 = 80, s2 = 5, p = 0.4), type = "l")
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
xseq = seq(-10, 10, length = 100)
dmixnorm2 = function(x, m1, s1, m2, s2, p) {
p*dnorm(x,m1,s1) + (1-p)*dnorm(x, m2, s2)
}
plot(xseq, dmixnorm2(xseq, m1 = 52.5, s1 = 5, m2 = 80, s2 = 5, p = 0.4), type = "l")
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
startingValues = c("p" = 0.4, "m1" = 52.5, "s1" = 5, "m2" = 80, "s2" = 5)
help(optim)
optim(startingValues, dmixnorm2)
optim(startingValues, nll)
optim(startingValues, nll(x = rnorm(100)))
optim(startingValues, nll(par = c("p" = 0.4, "m1" = 52.5, "s1" = 5, "m2" = 80, "s2" = 5), x = rnorm(100)))
par = c("p" = 0.4, "m1" = 52.5, "s1" = 5, "m2" = 80, "s2" = 5)
optim(par, nll, x = rnorm(100))
optim(par, nll, x = faithful)
optim(par, nll, x = faithful$waiting)
help(optim)
help(smooth)
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
lines(optim(par, nll, x = faithful$waiting))
plot(optim(par, nll, x = faithful$waiting))
optim(par, nll, x = faithful$waiting)
optim(par, nll, x = faithful$waiting)
optim(par, nll, x = faithful$waiting)[[1]]
optim(par, nll, x = faithful$waiting)[[1]]["p"]
p = 0.36
m1 = 54.61
s1 = 5.87
m2 = 80.1
s2 = 5.87
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
lines(xseq, dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
length(faithful$waiting)
xseq
lines(faithful$waiting, dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
plot(xseq, dmixnorm2(xseq, m1 = -3, s1 = 2, m2 = 4, s2 = 2, p = 0.4), type = "l")
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
lines(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
help(optim)
optim(par, nll, x = faithful$waiting, method = c(0, 5))
optim(par, nll, x = faithful$waiting, method = "L-BFGS-B" = c(0, 5))
optim(par, nll, x = faithful$waiting, method = "L-BFGS-B" = c(0, 0.5))
smooth(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
smooth(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
lines(smooth(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p)))
optim(par, nll, x = faithful$waiting, lower = c(0, -Inf, 0, -Inf, 0), upper(0.5, Inf, Inf, Inf, Inf))
optim(par, nll, x = faithful$waiting, lower = c(0, -Inf, 0, -Inf, 0), upper= c(0.5, Inf, Inf, Inf, Inf))
optim(par, nll, x = faithful$waiting, lower = c(0, -Inf, 0, -Inf, 0), upper= c(0.5, Inf, Inf, Inf, Inf))
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
smooth(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p)
smooth(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
optim(par, nll, x = faithful$waiting, lower = c(0, -Inf, 0, -Inf, 0), upper = c(0.5, Inf, Inf, Inf, Inf))
lines(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
p = 0.36
m1 = 54.61
s1 = 5.87
m2 = 80.1
s2 = 5.87
plot(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
lines(plot(dmixnorm2(faithful$waiting, m1, s1, m2, s2, p)))
hist(faithful$waiting, freq = FALSE,
ylab = "Probability",
xlab = "Waiting Times",
main = "")
xseq1 = seq(40, 100, length = 100)
lines(xseq1, dmixnorm2(faithful$waiting, m1, s1, m2, s2, p))
lines(xseq1, dmixnorm2(xseq1, m1, s1, m2, s2, p))
xseq1 = seq(40, 100, length = 100)
lines(xseq1, dmixnorm2(xseq1, m1, s1, m2, s2, p))
library(shiny)
runUrl
??runURL
??runUrl
??runGithub
runGithub("BEACN_Calculator", "taninaim")
runGitHub("BEACN_Calculator", "taninaim")
runGitHub("BEACN_Calculator", "taninaim")
library(shiny)
runGitHub("BEACN_Calculator", "taninaim")
cat("\014")
library(shiny)
library(shiny)
runGitHub("BEACN_Calculator", "taninaim")
install.packages("shiny")
install.packages("shiny")
gsub("[[:blank:]][^a][[:blank:]]*"," ", "a A lol c  C")
gsub("[[:blank:]][^a][[:blank:]]*"," ", "a A lol c  C")
gsub("[[:blank:]]*[^a][[:blank:]]*"," ", "a A lol c  C")
gsub("[[:blank:]][^a][[:blank:]]*"," ", "a A word c  C")
library(shiny)
runApp("~/Documents/BERKELEY/Spring_2014/BEACN/BEACN_Calculator")
runApp("~/Documents/BERKELEY/Spring_2014/BEACN/BEACN_Calculator")
